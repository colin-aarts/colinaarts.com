// Generated by LiveScript 1.5.0
(function(){
  var keystone, fecha, modelCleanCyclic, types, Post;
  keystone = require('keystone');
  fecha = require('fecha');
  modelCleanCyclic = require('~/server/src/model-clean-cyclic');
  types = keystone.Field.Types;
  Post = new keystone.List('Post', {
    autokey: {
      path: 'slug',
      from: 'title',
      unique: true
    },
    map: {
      name: 'title'
    },
    defaultSort: '-publishedAt',
    drilldown: 'author',
    track: true
  });
  Post.add({
    title: {
      type: String,
      required: true,
      index: true
    },
    state: {
      type: types.Select,
      options: 'draft, published, archived',
      'default': 'draft',
      required: true,
      index: true
    },
    type: {
      type: types.Select,
      options: 'article',
      'default': 'article',
      required: true,
      index: true
    },
    author: {
      type: types.Relationship,
      ref: 'User',
      required: true,
      index: true,
      initial: true
    },
    publishedAt: Date,
    image: {
      type: types.CloudinaryImage,
      autoCleanup: true,
      select: true
    },
    content: {
      brief: {
        type: types.Html,
        required: true,
        index: true,
        initial: true
      },
      extended: {
        type: types.Html,
        required: true,
        initial: true
      }
    }
  });
  Post.defaultColumns = 'title, type, state, author, publishedAt';
  /*
  ** Virtuals
  */
  Post.schema.set('toJSON', {
    virtuals: true,
    transform: modelCleanCyclic.transformer
  });
  Post.schema.virtual('createdAtFmt').get(function(){
    return fecha.format(new Date(this.createdAt), 'long');
  });
  Post.schema.virtual('updatedAtFmt').get(function(){
    return fecha.format(new Date(this.updatedAt), 'long');
  });
  Post.schema.virtual('publishedAtFmt').get(function(){
    return fecha.format(new Date(this.publishedAt), 'long');
  });
  Post.schema.virtual('image.listing').get(function(){
    return this._.image.src({
      width: 400,
      quality: 75
    });
  });
  Post.schema.virtual('image.fullwidth').get(function(){
    return this._.image.src({
      width: 1920,
      quality: 75
    });
  });
  /*
  ** Pre-hooks
  */
  Post.schema.pre('save', function(next){
    if (this.isModified('state') && this.state === 'published' && !this.publishedAt) {
      this.publishedAt = new Date;
    }
    return next();
  });
  Post.register();
}).call(this);

//# sourceMappingURL=posts.js.map
